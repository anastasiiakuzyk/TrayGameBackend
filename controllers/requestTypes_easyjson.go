// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package controllers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5ae452DecodeUntitledGameBackendControllers(in *jlexer.Lexer, out *UserResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "nickname":
			out.Nickname = string(in.String())
		case "photoUrl":
			out.PhotoUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5ae452EncodeUntitledGameBackendControllers(out *jwriter.Writer, in UserResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"photoUrl\":"
		out.RawString(prefix)
		out.String(string(in.PhotoUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5ae452EncodeUntitledGameBackendControllers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5ae452EncodeUntitledGameBackendControllers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5ae452DecodeUntitledGameBackendControllers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5ae452DecodeUntitledGameBackendControllers(l, v)
}
func easyjsonC5ae452DecodeUntitledGameBackendControllers1(in *jlexer.Lexer, out *StartRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auth_date":
			out.AuthDate = uint(in.Uint())
		case "first_name":
			out.FirstName = string(in.String())
		case "second_name":
			out.SecondName = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "id":
			out.Id = uint(in.Uint())
		case "photo_url":
			out.PhotoUrl = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5ae452EncodeUntitledGameBackendControllers1(out *jwriter.Writer, in StartRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"auth_date\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.AuthDate))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.SecondName != "" {
		const prefix string = ",\"second_name\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"photo_url\":"
		out.RawString(prefix)
		out.String(string(in.PhotoUrl))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5ae452EncodeUntitledGameBackendControllers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5ae452EncodeUntitledGameBackendControllers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5ae452DecodeUntitledGameBackendControllers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5ae452DecodeUntitledGameBackendControllers1(l, v)
}
func easyjsonC5ae452DecodeUntitledGameBackendControllers2(in *jlexer.Lexer, out *AnalyticsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "userId":
			out.UserId = uint(in.Uint())
		case "totalKills":
			out.TotalKills = uint(in.Uint())
		case "totalDeath":
			out.TotalDeath = uint(in.Uint())
		case "gamesPlayed":
			out.GamesPlayed = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5ae452EncodeUntitledGameBackendControllers2(out *jwriter.Writer, in AnalyticsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"totalKills\":"
		out.RawString(prefix)
		out.Uint(uint(in.TotalKills))
	}
	{
		const prefix string = ",\"totalDeath\":"
		out.RawString(prefix)
		out.Uint(uint(in.TotalDeath))
	}
	{
		const prefix string = ",\"gamesPlayed\":"
		out.RawString(prefix)
		out.Uint(uint(in.GamesPlayed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnalyticsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5ae452EncodeUntitledGameBackendControllers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnalyticsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5ae452EncodeUntitledGameBackendControllers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnalyticsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5ae452DecodeUntitledGameBackendControllers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnalyticsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5ae452DecodeUntitledGameBackendControllers2(l, v)
}
